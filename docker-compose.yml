volumes:
  pgdata:
  frontend_build:
  redis_data:
    driver: local
  tenant_configs:
    driver: local
    # We'll use direct volume mappings instead of driver_opts for Windows compatibility

networks:
  app_network:
    driver: bridge
    name: app_network
services:
  db:
    image: postgres:15 # PostgreSQL version
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD} # Loaded from root .env
      POSTGRES_DB: ${DB_NAME} # Loaded from root .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3

  expressjs:
    build:
      context: ./expressjs
    container_name: expressjs_service
    ports:
      - "5555:5555"  # Prisma Studio
      - "3000:3000"  # API
    restart: always
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis_service:6379
      NODE_ENV: development
      WEBSITE_PORT: 3000
      MAX_MEMORY: "1024M"
    volumes:
      - ./expressjs/src:/app/src
      - ./expressjs/logs:/app/logs
      - tenant_configs:/app/tenant-configs:rw
      - ./frontend/templates:/app/templates:ro
      - ./frontend/websites:/app/websites:rw
      # Map tenant-configs to local directory for visibility
      - ./infra/nginx/tenant.d:/app/tenant-configs-local:rw
    user: root
    command: ["node", "-r", "module-alias/register", "dist/server.js"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_network
  redis:
    image: redis:alpine
    container_name: redis_service
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
 
  nginx:
    build:
      context: ./infra/nginx
      dockerfile: Dockerfile
    container_name: nginx
    depends_on:
      - expressjs
      - admin
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infra/nginx/templates:/etc/nginx/templates:ro
      - ./frontend/templates:/usr/share/nginx/templates:ro
      - frontend_build:/usr/share/nginx/html:ro
      - ./frontend/websites:/usr/share/nginx/websites:ro
      - tenant_configs:/etc/nginx/tenant.d:ro
      # Map tenant.d to local directory for visibility
      - ./infra/nginx/tenant.d:/etc/nginx/tenant.d.local:ro
    ports:
      - "80:80"  # Only listen on localhost since we use Cloudflare Tunnel
    networks:
      - app_network
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.conf.template
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
    # The entrypoint script handles Nginx startup and config reloading
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin:
    build:
      context: ./frontend/admin
      dockerfile: Dockerfile
    container_name: frontend_service
    volumes:
      - ./frontend/admin:/app
      - frontend_build:/app/dist
    depends_on:
      - expressjs
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:80 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
